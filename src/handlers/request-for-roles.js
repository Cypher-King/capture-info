var { MessageActionRow, MessageButton, Permissions, MessageSelectMenu } = require('discord.js'),
    { connection, mod_connection } = require('./connection.js'),
    nrpnames = new Set(),
    sened = new Set(),
    snyatie = new Set();

class Request_For_Roles {
    async send_request(bot, message) {
        if (message.content.toLowerCase().includes("—Ä–æ–ª—å") && !message.content.toLowerCase().includes(`—Å–Ω—è—Ç—å`) || message.content.toLowerCase().includes("—Å–Ω–∏–º–∏") || message.content.toLowerCase().includes("—Å–Ω—è—Ç—å")) {
            await connection.query(`SELECT * FROM \`discord_settings\` WHERE \`guild\` = '${message.guild.id}'`, async (error, guild) => {
                if (error || guild.length == 0) { if (error) return console.error(error); else return; };
                if (guild[0].request_module == 0) return;
                if (message.content.toLowerCase().includes("—Ä–æ–ª—å") && !message.content.toLowerCase().includes(`—Å–Ω—è—Ç—å`)) {
                    if (!(JSON.parse(guild[0].request_settings).available_channels).some(id => id === message.channel.id)) return;
                    if (nrpnames.has(message.member.id)) {
                        if (message.member.roles.cache.some(r => (JSON.parse(guild[0].request_settings).roles_list).includes(r.id))) {
                            for (var i in JSON.parse(guild[0].request_settings).roles_list) {
                                var removerole = bot.guilds.cache.get(g => g.id == message.guild.id).roles.cache.get(r => r.id == (JSON.parse(guild[0].request_settings).roles_list)[i]);
                                if (message.member.roles.cache.some(role => (JSON.parse(guild[0].request_settings).roles_list)[i].includes(role.id))) {
                                    await message.member.roles.remove(removerole);
                                }
                            }
                        }
                        message.react(`üìõ`);
                        return;
                    }

                    for (var i in JSON.parse(guild[0].request_settings).tagslist) {
                        var nicknametest = message.member.displayName.toLowerCase();
                        nicknametest = nicknametest.replace(/ /g, '');
                        if (nicknametest.includes("[" + JSON.parse(guild[0].request_settings).tagslist[i].replace(/ /g, '').toLowerCase()) || nicknametest.includes(JSON.parse(guild[0].request_settings).tagslist[i].replace(/ /g, '').toLowerCase() + "]") || nicknametest.includes("(" + JSON.parse(guild[0].request_settings).tagslist[i].replace(/ /g, '').toLowerCase()) || nicknametest.includes(JSON.parse(guild[0].request_settings).tagslist[i].replace(/ /g, '').toLowerCase() + ")") || nicknametest.includes("{" + JSON.parse(guild[0].request_settings).tagslist[i].replace(/ /g, '').toLowerCase()) || nicknametest.includes(JSON.parse(guild[0].request_settings).tagslist[i].replace(/ /g, '').toLowerCase() + "}")) {
                            if (nicknametest.includes('ballas') && i == 1) {} else {
                                var roleid = JSON.parse(guild[0].request_settings).rolebytag[JSON.parse(guild[0].request_settings).tagslist[i].toUpperCase()]
                                var role = message.guild.roles.cache.find(r => r.id == roleid);
                                var reqchat = message.guild.channels.cache.find(c => c.id == JSON.parse(guild[0].request_settings).request_channel);
                                if (!role) {
                                    message.reply({
                                        embeds: [{
                                            color: 0xE53935,
                                            title: `‚ö†Ô∏è | –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞`,
                                            description: `**–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–æ–ª—å "${JSON.parse(guild[0].request_settings).tagslist[i]}" –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ..**`,
                                            footer: {
                                                text: message.guild.name,
                                                icon_url: message.guild.iconURL() 
                                            }
                                        }]
                                    })
                                    return;
                                } 
                                else if (!reqchat) {
                                    message.reply({
                                        embeds: [{
                                            color: 0xE53935,
                                            title: `‚ö†Ô∏è | –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞`,
                                            description: `**–ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–æ–ª–µ–π..**`,
                                            footer: {
                                                text: message.guild.name,
                                                icon_url: message.guild.iconURL() 
                                            }
                                        }]
                                    })
                                    return;
                                }
                                if (message.member.roles.cache.some(r => JSON.parse(guild[0].request_settings).roles_list.includes(r.id))) {
                                    message.reply({
                                        embeds: [{
                                            color: 0xE53935,
                                            title: `ü§® | –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞`,
                                            description: `**–£ –≤–∞—Å —É–∂–µ –∏ —Ç–∞–∫ –ø—Ä–∏—Å—É—Çc—Ç–≤—É—é—Ç —Ä–æ–ª–∏..\n–ß—Ç–æ-–±—ã –ª–∏—à–∏—Ç—å—Å—è —Å–≤–æ–∏—Ö —Ä–æ–ª–µ–π - –ø—Ä–æ–ø–∏—à–∏—Ç–µ \`/out\`**`,
                                            footer: {
                                                text: message.guild.name,
                                                icon_url: message.guild.iconURL() 
                                            }
                                        }]
                                    })
                                    return;
                                }
                                if (sened.has(message.member.id)){
                                    message.reply({
                                        embeds: [{
                                            color: 0xe3ff7d,
                                            title: `‚è≥ | –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞`,
                                            description: `**–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏!\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏..**`,
                                            footer: {
                                                text: message.guild.name,
                                                icon_url: message.guild.iconURL() 
                                            }
                                        }]
                                    })
                                    return;
                                }
                                var mention = message.guild.roles.cache.filter(r => JSON.parse(guild[0].request_settings).rolemoders[role.id].split(', ').some(_r => _r == r.id));
                                var row = new MessageActionRow()
                                .addComponents(
                                    new MessageSelectMenu()
                                        .setCustomId('select')
                                        .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Ç—Å–≤–∏–µ')
                                        .addOptions([
                                            {
                                                label: '‚úÖ',
                                                description: '–í—ã–¥–∞—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É',
                                                value: 'request_plus',
                                            },
                                            {
                                                label: 'üì®',
                                                description: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞',
                                                value: 'request_check',
                                            },
                                            {
                                                label: '‚ùå',
                                                description: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞',
                                                value: 'request_minus',
                                            },
                                            {
                                                label: 'üóëÔ∏è',
                                                description: '–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
                                                value: 'request_delete',
                                            },
                                        ]),
                                );
                                reqchat.send({
                                    content: `${mention.map(m => `<@&${m.id}>`).join(', ')}`,
                                    embeds: [{
                                        color: role.hexColor ? role.hexColor : 0xab82ff,
                                        title: `**–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏:**`,
                                        fields: [
                                            { name: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, value: `${message.author}`, inline: true },
                                            { name: `–ù–∏–∫–Ω–µ–π–º:`, value: `${message.member.displayName || message.member.user.username + message.member.user.tag}`, inline: true },
                                            { name: `–†–æ–ª—å:`, value: `${role}`, inline: true },
                                        ],
                                        timestamp: new Date(),
                                        footer: {
                                            text: `${message.member ? `${message.member.id}` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}`,
                                            icon_url: `${message.member ? `${message.member.user.displayAvatarURL({ format: 'png', size: 2048, dynamic: true })}` : ""}`,
                                        }
                                    }],
                                    components: [row]
                                })
                                sened.add(message.member.id);
                                return message.react(`üì®`);
                            }
                        }
                    }
                } else if (message.content.toLowerCase().includes("—Å–Ω–∏–º–∏") || message.content.toLowerCase().includes("—Å–Ω—è—Ç—å")) {
                    if (!message.member.roles.cache.some(r => JSON.parse(guild[0].request_settings).discord_moders.includes(r.id))) return;
                    var args = message.content.split(/ +/)
                    var onebe = false;
                    var twobe = false;
                    args.forEach(word => {
                        if (word.toLowerCase().includes(`—Ä–æ–ª—å`)) onebe = true
                        if (word.toLowerCase().includes(`—É`)) twobe = true
                    })
                    if (!onebe || !twobe) return;
                    if (message.mentions.users.size > 1) return;
                    var user = message.guild.members.cache.get(message?.mentions?.users?.first()?.id);
                    if (!user) return;
                    var roleremove = user.roles.cache.filter(r => JSON.parse(guild[0].request_settings).roles_list.some(_r => _r == r.id));
                    if (!roleremove.map(m => m.id)[0]) return message.react(`‚ùå`);
                    var permission_role = JSON.parse(guild[0].request_settings).rolemoders[roleremove.map(m => m.id)[0]].split(', ')
                    var dostup_perm = false;
                    for (var i = 0; i < permission_role.length; i++) {
                        if (message.member.roles.cache.some(r => permission_role[i].includes(r.id)) || message.member.permissions.has(Permissions.FLAGS.ADMINISTRATOR) || message.member.roles.cache.some(r => JSON.parse(guild[0].request_settings).discord_moders.includes(r.id))) dostup_perm = true;
                    }

                    if (!dostup_perm) return;
            
                    message.reply({
                        embeds: [{
                            color: 0xffbf00,
                            description: '**–¢–µ–ø–µ—Ä—å, —É–∫–∞–∂–∏—Ç–µ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—É —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏...**',
                            footer:{
                                text: 'üïê –£ –≤–∞—Å –µ—Å—Ç—å –º–∏–Ω—É—Ç–∞.'
                            }
                        }]
                    }).then(answer => {
                        var filter = response => {
                            return response?.member?.id == message.member.id
                        };
                        message.channel.awaitMessages({
                            filter,
                            max: 1,
                            time: 1000 * 60,
                            errors: ["time"]
                        }).then(async collected => {
                            user.roles.remove(roleremove.map(m => m.id)[0])
                            .then(async () => {
                                if (JSON.parse(guild[0].request_settings).additional_roles[roleremove.map(m => m.id)[0]]) {
                                    user.roles.remove(message.guild.roles.cache.get(JSON.parse(guild[0].request_settings).additional_roles[roleremove.map(m => m.id)[0]]))
                                    .catch(() => {})
                                }
                                var logs = message.guild.channels.cache.find(c => c.id == JSON.parse(guild[0].request_settings).logs);
                                if (logs) logs.send({
                                    content: `>>> **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** <@${message.member.id}>\n\`\`\`diff\n- –°–Ω—è–ª —Ä–æ–ª—å "${roleremove.map(m => m.name)[0]}"\`\`\`**–ü—Ä–∏—á–∏–Ω–∞: \`${collected.first().content}\`**\n**–°–Ω—è–ª:** ${user}\n**‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî**`
                                });
                                mod_connection.query(`SELECT * FROM \`users\` WHERE \`discord\` = '${message.member.id}'`, async (err, mod) => {
                                    if (err) return;
                                    if (mod.length == 0) return;
                                    if (mod[0].level != 0) {
                                        mod_connection.query(`UPDATE \`users\` SET \`roles\` = roles + 1 WHERE \`discord\` = '${message.member.id}'`)
                                    }
                                });
                                await user.send({
                                    embeds: [{
                                        color: 0xf04747,
                                        title: `–°–Ω—è—Ç–∏–µ —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Ä–æ–ª–∏`,
                                        description: `**${message.member} —Å–Ω—è–ª –≤–∞—à—É —Ä–æ–ª—å "${roleremove.map(m => m.name)[0]}" –ø–æ –ø—Ä–∏—á–∏–Ω–µ: \`${collected.first().content}\`**`,
                                        footer: {
                                            text: message.member.guild.name,
                                            icon_url: message.member.guild.iconURL() 
                                        }
                                    }]
                                })
                                collected.first().delete().catch(() => {});
                                answer.delete().catch(() => {});
                                message.delete().catch(() => {});
                            })
                            .catch(() => {
                                collected.first().delete().catch(() => {});
                                answer.delete().catch(() => {});
                                message.delete().catch(() => {});
                            })
                        })
                        .catch(() => {
                            answer.delete().catch(() => {})
                        });
                    });
                }
            });
        }
    };

    request_menu = async (bot, interaction) => {
        if (!["request_plus", "request_check", "request_minus", "request_delete"].some(id => id == interaction.values)) return;
        var { member, message } = interaction;
        await connection.query(`SELECT * FROM \`discord_settings\` WHERE \`guild\` = '${member.guild.id}'`, async (error, guild) => {
            if (error) {
                console.log(error)
                return await interaction.reply({ content: `${member}, –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞!`, ephemeral: true })
            }
            if (guild.length === 0) return;
            if (guild[0].request_module == 0) return;
            switch(interaction.values[0]) {
                case "request_plus": {
                    var gguild = bot.guilds.cache.get(member.guild.id);
                    var user = gguild.members.cache.get(message.embeds[0].fields[0].value.replace(/[^a-z–∞-—è—ë0-9\s]/gi, ''));
                    var roleid = message.embeds[0].fields[2].value.replace(/[^a-z–∞-—è—ë0-9\s]/gi, '');
                    var moders = JSON.parse(guild[0].request_settings).rolemoders[roleid].split(', ');
                    var access = false;

                    for (var i = 0; i < moders.length; i++) {
                        if (member.roles.cache.some(r => r.id == moders[i]) || member.permissions.has(Permissions.FLAGS.ADMINISTRATOR)) access = true;
                    }
                    
                    if (!access) return await interaction.reply({ content: `${member}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`, ephemeral: true });
                    if (!user) return await interaction.reply({ content: `${member}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω...`, ephemeral: true });
                    var role = member.guild.roles.cache.get(roleid);
                    if (!role) return await interaction.reply({ content: `${member}, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏!`, ephemeral: true });
                    var logs = member.guild.channels.cache.find(c => c.id == JSON.parse(guild[0].request_settings).logs);
                    user.roles.add(role).then(() => {
                        if (JSON.parse(guild[0].request_settings).additional_roles[roleid]) user.roles.add(gguild.roles.cache.get(JSON.parse(guild[0].request_settings).additional_roles[roleid])) .catch(() => {});
                        if (logs) logs.send({ content: `>>> **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** <@${member.id}>\n\`\`\`diff\n+ –í—ã–¥–∞–ª —Ä–æ–ª—å "${role.name}"\`\`\`**–ó–∞–ø—Ä–æ—Å–∏–ª:** ${user}\n**‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî**` });
                        user.send({
                            embeds: [{
                                color: 0x43b581,
                                title: `–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏`,
                                description: `**–í–∞–º —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å "${role.name}"**`,
                                footer: {
                                    text: member.guild.name,
                                    icon_url: member.guild.iconURL() 
                                }
                            }]
                        })
                        message.edit({
                            content: `**${member} –æ–¥–æ–±—Ä–∏–ª –∑–∞–ø—Ä–æ—Å!**`,
                            embeds: [{
                                color: 0x43b581,
                                title: `**–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω**`,
                                fields: [
                                    message.embeds[0].fields
                                ],
                                timestamp: new Date(),
                                footer: {
                                    text: `${message.embeds[0].footer.text}`,
                                    icon_url: new URL(message.embeds[0].footer.iconURL),
                                }
                            }],
                            components: []
                        })
                    })
                    .catch(async () => {
                        await interaction.reply({ content: `–û—à–∏–±–∫–∞, —è –Ω–µ —Å–º–æ–≥ –≤—ã–¥–∞—Ç—å —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫—É..`, ephemeral: true })
                    })
                    break;
                };
                case "request_minus": {
                    var gguild = bot.guilds.cache.get(member.guild.id);
                    var roleid = message.embeds[0].fields[2].value.replace(/[^a-z–∞-—è—ë0-9\s]/gi, '');
                    var moders = JSON.parse(guild[0].request_settings).rolemoders[roleid].split(', ');
                    var access = false;
                    for (var i = 0; i < moders.length; i++) {
                        if (member.roles.cache.some(r => r.id == moders[i]) || member.permissions.has(Permissions.FLAGS.ADMINISTRATOR)) access = true;
                    }
                    if (!access) return await interaction.reply({ content: `${member}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`, ephemeral: true })
                    var user = gguild.members.cache.get(message.embeds[0].fields[0].value.replace(/[^a-z–∞-—è—ë0-9\s]/gi, ''));
                    await interaction.reply({ content: `${member}, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏..`, ephemeral: true }).then(async () => {
                        var filter = response => { return response?.member?.id == member.id };
                        await interaction.channel.awaitMessages({ filter, max: 1, time: 1000 * 60, errors: ["time"] }).then(async answer => {
                            var answ = answer.first();
                            answ.delete().catch(() => {})
                            if (user) user.send({
                                embeds: [{
                                    color: 0xf04747,
                                    title: `–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏`,
                                    description: `**–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω ${member} –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n\`\`\`${answ.content}\`\`\`**`,
                                    footer: {
                                        text: member.guild.name,
                                        icon_url: member.guild.iconURL() 
                                    }
                                }]
                            }).catch(() => {});
                            message.edit({
                                content: `${member} –æ—Ç–∫–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ \`${answ.content}\``,
                                embeds: [{
                                    color: 0xf04747,
                                    title: `**–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω...**`,
                                    fields: [
                                        message.embeds[0].fields
                                    ],
                                    timestamp: new Date(),
                                    footer: {
                                        text: `${message.embeds[0].footer.text}`,
                                        icon_url: new URL(message.embeds[0].footer.iconURL),
                                    }
                                }],
                                components: [],
                            })
                            .then(async () => {
                                await interaction.followUp({ content: `${member}, –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user}`, ephemeral: true })
                            })
                        }).catch(async (err) => {
                            return await interaction.followUp({ content: `${member}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ..`, ephemeral: true })
                        });
                    });
                    break;
                };
                case "request_delete": {
                    var roleid = message.embeds[0].fields[2].value.replace(/[^a-z–∞-—è—ë0-9\s]/gi, '');
                    var moders = JSON.parse(guild[0].request_settings).rolemoders[roleid].split(', ');
                    var access = false;
                    for (var i = 0; i < moders.length; i++) {
                        if (member.roles.cache.some(r => r.id == moders[i]) || member.permissions.has(Permissions.FLAGS.ADMINISTRATOR)) access = true;
                    }
                    if (!access) return await interaction.reply({ content: `${member}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`, ephemeral: true });
                    message.edit({
                        content: `${member} –æ—á–∏—Å—Ç–∏–ª –∑–∞–ø—Ä–æ—Å`,
                        embeds: [{
                            color: 0x36393F,
                            title: `**–ó–∞–ø—Ä–æ—Å –æ—á–∏—â–µ–Ω...**`,
                            fields: [
                                message.embeds[0].fields
                            ],
                            timestamp: new Date(),
                            footer: {
                                text: `${message.embeds[0].footer.text}`,
                                icon_url: new URL(message.embeds[0].footer.iconURL),
                            }
                        }],
                        components: []
                    }).then(async () => {
                        await interaction.reply({ content: `${member}, –í—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—Å—Ç–∏–ª–∏ –∑–∞–ø—Ä–æ—Å!`, ephemeral: true })
                    })
                    break;
                };
                case "request_check": {
                    var gguild = bot.guilds.cache.get(member.guild.id);
                    var roleid = message.embeds[0].fields[2].value.replace(/[^a-z–∞-—è—ë0-9\s]/gi, '');
                    var moders = JSON.parse(guild[0].request_settings).rolemoders[roleid].split(', ');
                    var access = false;
                    for (var i = 0; i < moders.length; i++) {
                        if (member.roles.cache.some(r => r.id == moders[i]) || member.permissions.has(Permissions.FLAGS.ADMINISTRATOR)) access = true;
                    }
                    if (!access) return await interaction.reply({ content: `${member}, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!`, ephemeral: true })
                    if (message.embeds[0].title == '**–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—à–µ–Ω—ã...**') return await interaction.reply({ content: `–î–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–ø—Ä–æ—à–µ–Ω—ã!`, ephemeral: true })
                    var user = gguild.members.cache.get(message.embeds[0].fields[0].value.replace(/[^a-z–∞-—è—ë0-9\s]/gi, ''));
                    if (!user) return await interaction.reply({ content: `${member}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω...`, ephemeral: true })
                    user.send({
                        embeds: [{
                            color: 0x4f5d7e,
                            title: `–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏`,
                            description: `**–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ ${member} —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: (\`/stats\` + \`/time\`)**`,
                            footer: {
                                text: member.guild.name,
                                icon_url: member.guild.iconURL() 
                            }
                        }]
                    }).catch(() => {});
                    var row = new MessageActionRow()
                    .addComponents(
                        new MessageSelectMenu()
                            .setCustomId('select')
                            .setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Ç—Å–≤–∏–µ')
                            .addOptions([
                                {
                                    label: '‚úÖ',
                                    description: '–í—ã–¥–∞—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫—É',
                                    value: 'request_plus',
                                },
                                {
                                    label: '‚ùå',
                                    description: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–≥—Ä–æ–∫–∞',
                                    value: 'request_minus',
                                },
                                {
                                    label: 'üóëÔ∏è',
                                    description: '–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
                                    value: 'request_delete',
                                },
                            ]),
                    );
                    message.edit({
                        content: `${member} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ..`,
                        embeds: [{
                            color: 0xf9a62b,
                            title: `**–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—à–µ–Ω—ã...**`,
                            fields: [
                                message.embeds[0].fields
                            ],
                            timestamp: new Date(),
                            footer: {
                                text: `${message.embeds[0].footer.text}`,
                                icon_url: new URL(message.embeds[0].footer.iconURL),
                            }
                        }],
                        components: [row]
                    })
                    .then(async () => {
                        await interaction.reply({ content: `${member}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏ –æ–± –ø—Ä–æ—Å—å–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –¥–∞–Ω–Ω—ã–µ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: (\`/stats\` + \`/time\`)`, ephemeral: true })
                    })
                    break;
                }
                default: break;
            };
        });
    };
};

module.exports = new Request_For_Roles();